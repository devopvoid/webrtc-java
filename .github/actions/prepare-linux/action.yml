name: 'Prepare Linux Build'

description: 'Frees up disk space and installs required packages for Linux builds.'

runs:
  using: "composite"
  steps:
    - name: Disk cleanup
      run: |
        set -x
        df -h
        #sudo du -h -d1 /usr/local
        #sudo du -h -d1 /usr/local/share
        #sudo du -h -d1 /usr/local/lib
        #sudo du -h -d1 /usr/share
        RMI=`docker images -q -a`
        if [ -n "$RMI" ]; then
          docker rmi $RMI
        fi
        # 4.6G
        sudo rm -rf /usr/local/.ghcup
        # 1.7G
        sudo rm -rf /usr/share/swift
        # 1.4G
        sudo rm -rf /usr/share/dotnet
        # 13G
        sudo rm -rf /usr/local/lib/android
        df -h
      shell: bash

    - name: Install required packages
      run: |
        sudo apt-get update
        sudo apt-get install -y pulseaudio libpulse-dev libasound2-dev libdbus-1-dev libudev-dev libv4l-dev libx11-dev libxcomposite-dev libxrandr-dev libxfixes-dev binutils cmake git locales lsb-release ninja-build pkg-config python3 python3-setuptools rsync unzip wget xz-utils

        # Chromium Clang to be used with the clang toolchain file
        #curl -s https://raw.githubusercontent.com/chromium/chromium/main/tools/clang/scripts/update.py | python3 - --output-dir=/opt/clang
        # Use a more stable version of Clang
        sudo mkdir -p /opt/clang
        wget https://commondatastorage.googleapis.com/chromium-browser-clang/Linux_x64/clang-llvmorg-20-init-9764-gb81d8e90-72.tar.xz
        sudo tar -xvf clang-llvmorg-20-init-9764-gb81d8e90-72.tar.xz -C /opt/clang

        # Required for testing
        #pulseaudio --start
        sudo apt-get install -y pipewire pipewire-pulse gstreamer1.0-pipewire libspa-0.2-bluetooth libspa-0.2-jack pipewire-audio-client-libraries
        systemctl --user daemon-reload
        systemctl --user --now enable pipewire{,-pulse}.{socket,service}
      shell: bash

    - name: Install required packages for arm
      if: matrix.platform.name == 'linux_arm'
      run: |
        sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

        sudo dpkg --add-architecture armhf

        sudo rm /etc/apt/sources.list

        sudo tee -a /etc/apt/sources.list > /dev/null <<EOT
        deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
        deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
        deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
        EOT

        sudo apt-get update

        sudo apt install -y \
          libpulse-dev:armhf \
          libx11-dev:armhf \
          libxfixes-dev:armhf \
          libxrandr-dev:armhf \
          libxcomposite-dev:armhf \
          libdbus-1-dev:armhf

        # Avoid python3 conflict errors.
        sudo apt install -y --no-install-recommends libudev-dev:armhf
      shell: bash

    - name: Install required packages for arm64
      if: matrix.platform.name == 'linux_arm64'
      run: |
        sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

        sudo dpkg --add-architecture arm64

        sudo rm /etc/apt/sources.list

        sudo tee -a /etc/apt/sources.list > /dev/null <<EOT
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
        EOT

        sudo apt-get update

        sudo apt install -y \
          libpulse-dev:arm64 \
          libx11-dev:arm64 \
          libxfixes-dev:arm64 \
          libxrandr-dev:arm64 \
          libxcomposite-dev:arm64 \
          libdbus-1-dev:arm64

        # Avoid python3 conflict errors.
        sudo apt install -y --no-install-recommends libudev-dev:arm64
      shell: bash
